Bitwise operators:
------------------
		
	class Number{
		int num;
	public:
		void setNum(int x=0);
		void disp();		
		
		void bitState(int pos);		
		
		void bitToggle(int pos);		
		
		//void printBinary(); //TO be implemented later		
	};
	
Number : 10
	0000 0000 0000 0000 0000 0000 0000 1010
pos: 3
	3 bit on 10 is ON
	
Number : 10
	0000 0000 0000 0000 0000 0000 0000 1010
toggling pos: 3 
	0000 0000 0000 0000 0000 0000 0000 0010
after toggling:
	Num: 2
========================================================================
Bitwise operators:
------------------
	1 Byte --> 8 bits 	
	---------------------
	bin --> unsigned --> signed    --> 0 to (2 ^ 3 - 1) --> 0 - 7
	000 --> 0 		---> 0
	001 --> 1 		---> 1
	010 --> 2 		---> 2
	011 --> 3 		---> 3
	--------------------------
	100 --> 4 		---> -4
	101 --> 5 		---> -3
	110 --> 6 		---> -2
	111 --> 7 		---> -1
	
	001 --> 1 
		2's complement --> 1's complement + 1 
		
			001
			
		--> 110 --> 1's complement
		      1
			----
            111 --> 2's complement of 1 
---------------------------------------------------	

0000 0000 0000 0000 0000 0000 0000 0001

0111 1111 1111 1111 1111 1111 1111 1111  --> 214,74,83,647
1000 0000 0000 0000 0000 0000 0000 0000  -->-214,74,83,648


1111 1111 1111 1111 1111 1111 1111 1111 --> -1 ----> 429,49,67,295 
=====================================================================
		ASCII
'0' --> 48											
'1' --> 49
.
.
'9' --> 57


'A' --> 65 --> 0100 0001 
'B' --> 66 --> 0100 0010
.
.
'Z' --> 90 --> 0101 1010
											
'a' --> 97 
'b' --> 98
.
.
'z' --> 122
 	
	10 & 8 --> 8 
		
	0000 1010
	0000 1000
	----------
	0000 1000 --> 8
	----------
	
	10 | 8 --> 10
	
	0000 1010
	0000 1000
	----------
	0000 1010 --> 10
	---------	
	
	10 ^ 8 --> 2
	
	0000 1010
	0000 1000
	----------	
	0000 0010 --> 2
	---------
	
	~10 --> -11
	
	0000 0000 0000 0000 0000 0000 0000 1010
	---------------------------------------
	1111 1111 1111 1111 1111 1111 1111 0101
	---------------------------------------
		
	2's complement  - 1  = 1's complement -->
	
	10 --> -10 - 1 ==> -11
	=====================================================
	1 << 2 ==> 	0001 << 2 --> 0100 ==> 4
	8 >> 2 --> 1000 >> 2 --> 0010 --> 2
	----------------------------------------------
	10 << 2 --> 40 
		0000 1010 << 2 ---> 0010 1000 --> 40
	=====================
	10 >> 2 ---> 2
		0000 1010 >> 2 ---> 0000 0010 --> 2
=========================================================================
Toggling a nibble:
	nibble is combination to 4 bits in a number 
Num: 10	
	0000 0000 0000 0000 0000 0000 0000 1010
Pos: 5
	0000 0000 0000 0000 0000 0000 1111 1010
	
signed: 10	unsigned: 10	hexa: a 
After toggling pos 5 
signed: 250	unsigned: 250	hexa: fa 
=========================================================================

	num = 10, pos = 3;
	num ^= 1 << pos ; // logic for toggling a bit 

-------------------------------------------------------------------------
Control Structures:
-------------------
	1. Sequential statements 
	2. Conditional statements
	3. Iterative/Looping statements
	
------------------------------------------------------------------------

	if (cond)
		single statement here 
		
	if (cond)
	{
		multiple statements here 
		multiple statements here 		
	}	
	
	if (cond)
	{
		multiple statements here 
		multiple statements here 		
	}else {
		multiple statements here 
		multiple statements here 		
	}	

	if (cond)
	{
		multiple statements here 
		multiple statements here 		
	}else if (cond){
		multiple statements here 
		multiple statements here 
	} else {
		multiple statements here 
		multiple statements here 		
	}	

	


1. Take a number print even or odd 
2. Take a number print correct suffix
	num: 1
		1st 
	num: 11
		11th 
	num: 2
		2nd 
	num: 102
		102nd 
	num: 112
		112th

3. Using Looping constructs
			while 
			do while 
			for 
		
		a. print 1 to 10 using all the above loops using a single variable
			while 	: 1 2 3 4 5 6 7 8 9 10
			do while: 1 2 3 4 5 6 7 8 9 10 
			for : 1 2 3 4 5 6 7 8 9 10
		
		b. Accept a number from user, print next 5 even an odd numbers 
			scenario #1
				Accept a num: 10
				Even : 10 12 14 16 18
				Odd : 11 13 15 17 19		
			scenario #2
				Accept a num: 101
				Odd : 101 103 105 107 109		
				Even : 102 104 106 108 110			

		c. Accept a number, print whether the given number is prime or not
			scenario #1
				Accept a  number : 100
				100 is NOT a prime number 
			scenario #2
				Accept a  number : 101
				101 is a prime number 
		
		d. Print the calendar based on the formula discussed earlier(day of the week).		
==========================================================================
Nesting of loops:
-----------------
	1. Accept a number from the user, print first 25 prime numbers from any given number.	
		Accept a num: 100		
			101 103 107 ... 

	2. Accept a number, print multiplication table for next 10 numbers in a tabular format.	
		Accept a num:	10
			10  11  12  13  14  15  16  17  18  19 
		10  100 110 120 130 140 150 160 170 180 190
		11  110 121 132 143 154 165 176 187 198 209
		12
		13
		14
		.
		19  190 209 228 247 266 . . .           361
============================================================================
	3.	A Puzzle or a  real time problem (Greedy Daughters problem) :
		A farmer has 3 daughters, has a mango farm. 
		He keeps some mangoes in the store for equal distribution.
		for example :		
	Total mangoes 25.
			
		1st daughter tastes 1 +  X / 3 --> Y --> 1 + 8 --> 9 ==> 16
		2nd daughter tastes 1 +  X / 3 --> Y --> 1 + 5 --> 6 ==> 10
		3rd daughter tastes 1 +  X / 3 --> Y --> 1 + 3 --> 4 --> 6
		Father comes home 6 / 3 --> 2 each daughter		
==========================================================================


